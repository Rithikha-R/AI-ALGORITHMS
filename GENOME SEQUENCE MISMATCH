package genome;

class GFG
{

static void jaro_distance(String s1, String s2)
{
	// Length of two Strings
	int len1 = s1.length(),
		len2 = s2.length();

	// Maximum distance upto which matching is allowed
	int max_dist = (int) (Math.floor(Math.max(len1, len2) / 2) - 1);

	// Count of matches
	int match = 0;
	// Hash for matches
	int hash_s1[] = new int[s1.length()];
	int hash_s2[] = new int[s2.length()];

	// Traverse through the first String
	for (int i = 0; i < len1; i++) 
	{

		// Check if there is any matches
		for (int j = Math.max(0, i - max_dist);
			j < Math.min(len2, i + max_dist + 1); j++)

			// If there is a match
			if (s1.charAt(i) == s2.charAt(j) && hash_s2[j] == 0) 
			{
				hash_s1[i] = 1;
				hash_s2[j] = 1;
				match++;
				break;
			}
	}

	// If there is no match
	if (match == 0)
		System.out.println("There is no match at all");

	int point = 0;

	// Count number of occurrences where two characters match but there is a third matched character in between the indices
	int[] pos1 = new int[match];
	int[] pos2 = new int[match];
	int pos = 0;
	for (int i = 0; i<len1; i++)
	{
		if (hash_s1[i]==1)
		{	
			pos1[pos] = i;
			pos++;
		}
	}
	pos = 0;
	for (int i = 0; i<len2; i++)
	{
		if (hash_s2[i]==1)
		{	
			pos2[pos] = i;
			pos++;
		}
	}
	//match=+5,mismatch=-4,gap=-12
	int prev1 = 0, prev2 = 0;
	int score = match*5;
	for (int i = 0; i<match; i++)
	{
		int dif1 = pos1[i] - prev1;
		int dif2 = pos2[i] - prev2;
		int gaps = (int)(Math.abs(dif1 - dif2));
		int mismatch = (int)(Math.min(dif1, dif2));
		score = score - (12*gaps) - (4 * mismatch);
		prev1 = pos1[i]+1;
		prev2 = pos2[i]+1;
	}
	int dif1 = len1 - pos1[match-1]-1;
	int dif2 = len2 - pos2[match-1]-1;
	int gaps = (int)(Math.abs(dif1 - dif2));
	int mismatch = (int)(Math.min(dif1, dif2));
	score = score - (12*gaps) - (4 * mismatch);
	System.out.println("Alignment Score = " + score);
}
public static void main(String[] args)
{
	String s1 = "TRACE", s2 = "CREATE";
	jaro_distance(s1, s2);
}
}

