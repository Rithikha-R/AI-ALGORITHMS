#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAX 100

struct node
{
    int vertex;
    struct node* next;
};

struct graph 
{
    int num;
    struct node* list[MAX];
};

struct queue 
{
    int items[MAX];
    int front;
    int rear;
};

struct node* createnode(int vertex)
{
    struct node* newnode = (struct node*)malloc(sizeof(struct node));
    newnode->vertex = vertex;
    newnode->next = NULL;
    return newnode;
}

struct graph* creategraph(int num)
{
    struct graph* grph = (struct graph*)malloc(sizeof(struct graph));
    grph->num = num;

    for(int i = 0; i < num; i++)
    {
        grph->list[i] = NULL;
    }
    return grph;
}

void addnode(struct graph* grph, int source, int dest) 
{
    struct node* newnode = createnode(dest);
    newnode->next = grph->list[source];
    grph->list[source] = newnode;
}

struct queue* createQueue()
{
    struct queue* q = (struct queue*)malloc(sizeof(struct queue));
    q->front = -1;
    q->rear = -1;
    return q;
}

bool isEmpty(struct queue* q) 
{
    return q->rear == -1;
}

void enqueue(struct queue* q, int value)
{
    if (q->rear == MAX - 1)
        printf("\nQueue is Full!!");
    else 
    {
        if (q->front == -1)
            q->front = 0;
        q->rear++;
        q->items[q->rear] = value;
    }
}

int dequeue(struct queue* q) 
{
    int item;
    if (isEmpty(q)) {
        printf("Queue is empty");
        item = -1;
    }
    else
    {
        item = q->items[q->front];
        q->front++;
        if (q->front > q->rear) 
        {
            q->front = q->rear = -1;
        }
    }
    return item;
}

void printPath(int parent[], int v)
{
    if (parent[v] == -1)
    {
        printf("%d ", v);
        return;
    }
    printPath(parent, parent[v]);
    printf("-> %d ", v);
}

bool BFS(struct graph* grph, int src, int dest) 
{
    struct queue* q = createQueue();
    bool visited[MAX] = {false};
    int parent[MAX];
    for (int i = 0; i < MAX; i++) 
    {
        parent[i] = -1;
    }

    visited[src] = true;
    enqueue(q, src);
    
    while (!isEmpty(q))
    {
        int currentVertex = dequeue(q);
        
        struct node* temp = grph->list[currentVertex];
        while (temp) {
            int adjVertex = temp->vertex;
            if (!visited[adjVertex])
            {
                visited[adjVertex] = true;
                parent[adjVertex] = currentVertex;
                enqueue(q, adjVertex);
            }
            temp = temp->next;
        }
    }

    if (!visited[dest])
    {
        printf("No path exists between %d and %d\n", src, dest);
        return false;
    }

    printf("Path from %d to %d:\n", src, dest);
    printPath(parent, dest);
    printf("\n");
    return true;
}

int main()
{
    int num, edges;
    printf("Enter number of vertices: ");
    scanf("%d", &num);

    struct graph* grph = creategraph(num);

    printf("Enter number of edges: ");
    scanf("%d", &edges);

    printf("Enter source and destination vertex: \n");
    for (int i = 0; i < edges; i++) 
    {
        int source, dest;
        printf("Edge %d: ", i + 1);
        scanf("%d %d", &source, &dest);

        if (source < 0 || source >= num || dest < 0 || dest >= num) 
        {
            printf("Invalid vertex\n");
            i--;
        } 
        else 
        {
            addnode(grph, source, dest);
        }
    }

    int src, dest;
    printf("Enter source node: ");
    scanf("%d", &src);
    printf("Enter destination node: ");
    scanf("%d", &dest);

    BFS(grph, src, dest);

    return 0;
}
